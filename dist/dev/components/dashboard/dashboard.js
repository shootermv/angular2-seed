var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('angular2/core');
var common_1 = require('angular2/common');
var now_1 = require('../common/now/now');
var flot_1 = require('../common/flot/flot');
var my_collapse_1 = require('../common/my-collapse/my-collapse');
var flotService_1 = require('../../services/flotService');
var emitterService_1 = require('../../services/emitterService');
var http_1 = require('angular2/http');
var DashboardCmp = (function () {
    function DashboardCmp(_flotService) {
        this._flotService = _flotService;
        this.splineOptions = {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true,
                    radius: 4
                },
                splines: {
                    show: true,
                    tension: 0.4,
                    lineWidth: 1,
                    fill: 0.5
                }
            },
            grid: {
                borderColor: '#eee',
                borderWidth: 1,
                hoverable: true,
                backgroundColor: '#fcfcfc'
            },
            tooltip: true,
            tooltipOpts: {
                content: function (label, x, y) { return x + ' : ' + y; }
            },
            xaxis: {
                tickColor: '#fcfcfc',
                mode: 'categories'
            },
            yaxis: {
                min: 0,
                max: 150,
                tickColor: '#eee',
                position: 'left',
                tickFormatter: function (v) {
                    return v;
                }
            },
            shadowSize: 0
        };
        this.dataset = [];
        this.emitter = emitterService_1.EmitterService.get('channel_1');
    }
    DashboardCmp.prototype.getEntries = function () {
        var _this = this;
        this._flotService.getFlotEntries().subscribe(function (entries) {
            _this.dataset = entries;
            _this.emitter.emit('Broadcast');
        }, function (error) { _this.errorMessage = error; });
    };
    DashboardCmp.prototype.chartRefresh = function () {
        this.getEntries();
    };
    DashboardCmp.prototype.ngOnInit = function () {
        this.getEntries();
    };
    DashboardCmp = __decorate([
        core_1.Component({
            selector: 'dashboard',
            template: "\n    <h3>\n       <!-- START Language list-->\n       <div class=\"pull-right\">\n\n       </div>\n       <!-- END Language list    -->\n       Dashboard\n       <small>Hi, I'm a dashboard page!</small>\n    </h3>\n    <!-- START widgets box-->\n    <div class=\"row\">\n       <div class=\"col-lg-3 col-sm-6\">\n          <!-- START widget-->\n          <div class=\"panel widget bg-primary\">\n             <div class=\"row row-table\">\n                <div class=\"col-xs-4 text-center bg-primary-dark pv-lg\">\n                   <em class=\"icon-cloud-upload fa-3x\"></em>\n                </div>\n                <div class=\"col-xs-8 pv-lg\">\n                   <div class=\"h2 mt0\">1700</div>\n                   <div class=\"text-uppercase\">Uploads</div>\n                </div>\n             </div>\n          </div>\n       </div>\n       <div class=\"col-lg-3 col-sm-6\">\n          <!-- START widget-->\n          <div class=\"panel widget bg-purple\">\n             <div class=\"row row-table\">\n                <div class=\"col-xs-4 text-center bg-purple-dark pv-lg\">\n                   <em class=\"icon-globe fa-3x\"></em>\n                </div>\n                <div class=\"col-xs-8 pv-lg\">\n                   <div class=\"h2 mt0\">700\n                      <small>GB</small>\n                   </div>\n                   <div class=\"text-uppercase\">Quota</div>\n                </div>\n             </div>\n          </div>\n       </div>\n       <div class=\"col-lg-3 col-md-6 col-sm-12\">\n          <!-- START widget-->\n          <div class=\"panel widget bg-green\">\n             <div class=\"row row-table\">\n                <div class=\"col-xs-4 text-center bg-green-dark pv-lg\">\n                   <em class=\"icon-bubbles fa-3x\"></em>\n                </div>\n                <div class=\"col-xs-8 pv-lg\">\n                   <div class=\"h2 mt0\">500</div>\n                   <div class=\"text-uppercase\">Reviews</div>\n                </div>\n             </div>\n          </div>\n       </div>\n       <div class=\"col-lg-3 col-md-6 col-sm-12\">\n          <!-- START date widget-->\n          <div class=\"panel widget\">\n             <div class=\"row row-table\">\n                <div class=\"col-xs-4 text-center bg-green pv-lg\">\n                   <!-- See formats: https://docs.angularjs.org/api/ng/filter/date-->\n                   <now format=\"MMMM\" class=\"text-sm\"></now>\n                   <br/>\n                   <now format=\"d\" class=\"h2 mt0\"></now>\n                </div>\n                <div class=\"col-xs-8 pv-lg\">\n                   <now format=\"EEEE\" class=\"text-uppercase\"></now>\n                   <br/>\n                   <now format=\"h:mm\" class=\"h2 mt0\"></now>\n                   <!--<now format=\"a\" class=\"text-muted text-sm\"></now>-->\n                </div>\n             </div>\n          </div>\n          <!-- END date widget    -->\n       </div>\n    </div>\n    <!-- END widgets box-->\n    <div class=\"row\">\n       <!-- START dashboard main content-->\n       <div class=\"col-lg-9\">\n          <!-- START chart-->\n          <div class=\"row\">\n             <div class=\"col-lg-12\">\n                <!-- START widget-->\n                <div id=\"panelChart9\" ng-controller=\"DashboardController as dash\" class=\"panel panel-default\">\n                   <div class=\"panel-heading\">\n                      <paneltool tool-collapse=\"tool-collapse\" tool-refresh=\"traditional\" class=\"pull-right\">\n                            <a href=\"#\" >         \n                                <em  class=\"fa\" [ngClass]=\"{'fa-minus': !isCollapsed, 'fa-plus': isCollapsed}\" (click)=\"isCollapsed = !isCollapsed\"></em>\n                                <!--<em  class=\"fa fa-minus ng-no-animation\"></em>-->\n                            </a>\n                            <a href=\"#\" (click)=\"chartRefresh();false\"> \n                               <em class=\"fa fa-refresh\" ></em> \n                            </a>\n                        </paneltool>\n                      <div class=\"panel-title\">Inbound visitor statistics</div>\n                   </div>\n                   <div [collapse]=\"isCollapsed\" class=\"panel-wrapper\">\n                      <div class=\"panel-body\">\n                          <flot  [options]=\"splineOptions\" [dataset]=\"dataset\" height=\"220px\" width=\"100%\"></flot>\n                      </div>\n                   </div>\n                </div>\n                <!-- END widget-->\n             </div>\n          </div>\n      </div>\n    </div>      \n  ",
            styles: ["\n\n  "],
            directives: [common_1.CORE_DIRECTIVES, now_1.NowCmp, flot_1.FlotCmp, my_collapse_1.CollapseCmp],
            providers: [flotService_1.FlotService, http_1.HTTP_PROVIDERS]
        }), 
        __metadata('design:paramtypes', [flotService_1.FlotService])
    ], DashboardCmp);
    return DashboardCmp;
})();
exports.DashboardCmp = DashboardCmp;

//# sourceMappingURL=data:application/json;base64,